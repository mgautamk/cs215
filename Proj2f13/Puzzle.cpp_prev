#include <iostream>
#include "Puzzle.h"
#include <ctime>
#include <iomanip>
#include <stdlib.h>

using namespace std;

Puzzle::Puzzle ()
{
  int num = 1;
  // int pointx = 3;
  // int pointy = 3;
  for ( int r = 0; r < 4; r++)
    for (int c = 0; c <4; c++)
      {
	tiles [r][c] = num;
	num = (num +1)%16;
      }

}

void Puzzle::Display (ostream & outs) const
{
  outs << "+------+------+------+------+" << endl;
  outs << "|      |      |      |      |" << endl;
  outs << "|"<< setw(4) << tiles[0][0] << setw(3);
  outs << "|"<< setw(4) << tiles[0][1] << setw(3); 
  outs << "|"<< setw(4) << tiles[0][2] << setw(3); 
  outs << "|"<< setw(4) << tiles[0][3] << setw(3); 
  outs << "|"<< endl;
  outs << "|      |      |      |      |" << endl;
  outs << "+------+------+------+------+" << endl;
  outs << "|      |      |      |      |" << endl;
  outs << "|"<< setw(4) << tiles[1][0] << setw(3);
  outs << "|"<< setw(4) << tiles[1][1] << setw(3);
  outs << "|"<< setw(4) << tiles[1][2] << setw(3);
  outs << "|"<< setw(4) << tiles[1][3] << setw(3); 
  outs << "|"<< endl;
  outs << "|      |      |      |      |" << endl;
  outs << "+------+------+------+------+" << endl;
  outs << "|      |      |      |      |" << endl;
  outs << "|"<< setw(4) << tiles[2][0] << setw(3);
  outs << "|"<< setw(4) << tiles[2][1] << setw(3);
  outs << "|"<< setw(4) << tiles[2][2] << setw(3);
  outs << "|"<< setw(4) << tiles[2][3] << setw(3);
  outs << "|"<< endl;
  outs << "|      |      |      |      |" << endl;
  outs << "+------+------+------+------+" << endl;
  outs << "|      |      |      |      |" << endl;
  outs << "|"<< setw(4) << tiles[3][0] << setw(3);
  outs << "|"<< setw(4) << tiles[3][1] << setw(3);
  outs << "|"<< setw(4) << tiles[3][2] << setw(3);
  outs << "|"<< setw(4) << tiles[3][3] << setw(3);
  outs << "|" << endl;
  outs << "|      |      |      |      |" << endl;
  outs << "+------+------+------+------+" << endl;
}

void Puzzle::Scramble ()
{
  // srand(time(NULL));
  char a = 'a';
  char w = 'w';
  char s = 's';
  char d = 'd';
  for (int t = 0; t < 100; t++)
    {
      int rn = rand()%4;
      if (rn == 0)
	Move(a);
      if (rn == 1)
	Move(s);
      if (rn ==2)
	Move(w);
      if (rn == 3)
	Move(d);
    }
} 

bool Puzzle::operator == (const Puzzle & P) const
{
  int game;
  for (int x = 0; x < 4; x++)
    for (int y = 0; y < 4; y++)
      {
	if (tiles[x][y] == P.tiles[x][y])
	  game += 1;
	if (game ==16)
	  return true;
      }
  return false;
}

void Puzzle::Move (char direction)
{
  for (int startx = 0; startx < 4; startx++)
    for (int starty = 0; starty < 4; starty++)
      if (tiles[startx][starty] == 0)
	{
	  pointx = startx;
	  pointy = starty;
	}

  char directionlow = tolower(direction);
  switch(directionlow)
    {
    case 'w':
      if (tiles[pointx-1][pointy] != tiles[-1][pointy])
	{
	  swap(tiles[pointx][pointy], tiles[pointx-1][pointy]);
	  pointy -= 1;
	}
      else 
	{
	  cout << "Invalid Move" << endl;
	}
      break;
      
    case 's':
      if (tiles[pointx+1][pointy] != tiles[4][pointy])
	{
	  swap(tiles[pointx][pointy], tiles[pointx+1][pointy]);
	  pointy += 1;
	}
      else 
	{
	  cout <<"Invalid Move" << endl;
	}
      break;

    case 'a':
      if (tiles[pointx][pointy-1] != tiles[pointx][-1])
	{
      swap(tiles[pointx][pointy], tiles[pointx][pointy-1]);
      pointx -= 1;
	}
      else 
	{
	  cout << "Invalid Move" << endl;
	}
      break;

    case 'd':
      if (tiles [pointx][pointy+1] != tiles[pointx][4])
	{
      swap(tiles[pointx][pointy], tiles[pointx][pointy+1]);
      pointx += 1;
	}
      else
	{
	  cout << "Invalid Move" << endl;
	}
      break;
    }
}
void Puzzle:: Instructions()
{
  cout <<" choose a title to swap." << endl;
  cout <<"          w: up" << endl;
  cout <<" a: left, s: down, d: right" << endl;
}

