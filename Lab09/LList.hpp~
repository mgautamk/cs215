#ifndef LLIST_H
#define LLIST_H
#include <iostream>

using namespace std;

class LList
{
   private:
      struct LNode
      {
         LNode ();
         int data;
         LNode * next;
      };
   public:
      LList ();
      LList (const LList & other);
      ~LList ();
      LList & operator = (const LList & other);
      bool operator == (const LList & other);
      int Size () const;
      friend ostream & operator << (ostream & outs, const LList & L);
      bool InsertFirst (const int & value);
      bool InsertLast (const int & value);
      bool DeleteFirst ();
      bool DeleteLast ();
   private:
      LNode * first;
      int size;
};

#endif
#include "LList.h"
LList::LNode::LNode ()
{ // This function initializes the Nodes to zero and points the
  //next node to NULL
  data = 0;
  next = NULL;
}

LList::LList ()
{ // This function empties the list not pointing to anything
  size = 0;
  first = NULL;
}

LList::LList (const LList & other)
{ // This function sets the value of size to zero, sets the 
  //value of first to NULL and while pointer is not null, it calls
  //the InsertLast function to put the data into the last space
  first = NULL;
  size = 0;
  LNode * p = other.first;
  while (p != NULL)
    {
      InsertLast(p->data);
      p = p->next;
    }
}

LList::~LList ()
{ // This is a deconstructor, it will delete the first if its
  //not empty
  while (first != NULL)
    DeleteFirst();
}

LList & LList::operator = (const LList & other)
{ // This function checks to see if two nodes are equal, if they
  //are not equal remove the data in the first and move the list
  if (this == & other)
    return * this;
  while (first)
    DeleteFirst();
  for (LNode * n = other.first; n != NULL; n = n->next)
    InsertLast(n->data);
  return * this;
}

bool LList::operator == (const LList & other)
{ // This function returns false if sizes of two nodes aren't equal,
  //compares corresponding nodes, and if any pair are different, returns false,
  //else returns true
  if (size != other.size)
    false;
  LNode * n = first;
  LNode * m = other.first;
  while (n != NULL)
    {
      if (n->data != m->data)
	return false;
      n = n->next;
      m = m->next;
    }
  return true;
}

int LList::Size () const
{ // Returns the size value
  return size;
}

ostream & operator << (ostream & outs, const LList & L)
{ // This stub outputs the pointer data and pushes the pointer to next node
  // if current node not empty
  LList::LNode * p = L.first;
  while (p != NULL)
    {
      outs << p->data << ' ';
      p = p->next;
    }
	return outs;
}

bool LList::InsertFirst (const int & value)
{ // This function Inserts the value to the front of the list
  LNode * np = new LNode;
  if (np == NULL)
	return false;
  np->data = value;
  np->next = first;
  first = np;
  size++;
  return true;
}

bool LList::InsertLast (const int & value)
{ // This function Inserts the value to the end of the list
  if (size == 0)
    return InsertFirst(value);
  LNode * np = new LNode;
  if (np == NULL)
    return false;
  np->data = value;
  LNode * p = first;
  while (p->next !=NULL)//walk to the last node
    {
      p = p->next;
    }
  p->next = np;
  size++;
  return true;
}

bool LList::DeleteFirst ()
{ // This function deletes the first value from the list
    if (size == 0)
    return false;
  if (size == 1)
    {
      delete first;
      first = NULL;
      size = 0;
      return true;
    }
  LNode * p = first;
  first = first->next;
  delete p;
  size--;
  return true;
}

bool LList::DeleteLast ()
{ // This function deletes the last value from the list
  if (size == 0)
    return false;
  if (size <= 1)
    return DeleteFirst();
  LNode * p = first;
  while (p->next->next != NULL)
    p = p->next;
  delete p->next;
  p->next = NULL;
  size--;
  return true;
}

